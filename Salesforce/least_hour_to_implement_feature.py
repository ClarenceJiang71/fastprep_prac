"""
There are two lists of size n - developmentTime and integrationTime. 
Any feature can be either implemented by development or by integration. 
While development of multiple features can happen concurrently by multiple developers, 
integration of features can only be sequential and can only be done by the team lead. 
Return the least number of hours to implement all the n features. 
Assume, there are more than n developers.

Function Description

Complete the function leastHours in the editor.

leastHours has the following parameters:

1. int[] developmentTime: an array of integers representing the time to develop each feature
2. int[] integrationTime: an array of integers representing the time to integrate each feature
Returns

int: the least number of hours to implement all features

Example 1: 
Input:  developmentTime = [3, 4, 5, 9], integrationTime = [3, 2, 5, 5]
Output: 5 
Explanation:
    First 3 features are developed and take 5 hours and in the meanwhile, integration of the last one takes place.

Example 2:
Input:  developmentTime = [8, 10, 6, 7], integrationTime = [1, 2, 2, 1]
Output: 6 
Explanation:
    Sum of all integrations (1 + 2 + 2 + 1 = 6) is less than the minimum development time, so all features are integrated.    
"""

def brute_force(developmentTime, integrationTime):
    """
    This is a brute force method generated by ChatGPT 
    it's not efficient but only used to verify 
    if a fancy algorithm is correct or not. 
    Use this as ground truth for custom test cases.
    """
    n = len(developmentTime)
    min_time = float('inf')
    
    # Generate all possible assignments (2^n combinations)
    for i in range(1 << n):
        total_development_time = 0
        total_integration_time = 0
        
        for j in range(n):
            if (i & (1 << j)) != 0:
                # Assign this feature to development
                total_development_time = max(total_development_time, developmentTime[j])
            else:
                # Assign this feature to integration
                total_integration_time += integrationTime[j]
        
        # The total time is the maximum of development and integration times
        total_time = max(total_development_time, total_integration_time)
        
        # Track the minimum time
        min_time = min(min_time, total_time)
    
    return min_time


def leastHours(developmentTime, integrationTime) -> int:
    """
    Maybe implement a binary search idea 
    """
    integration_sum = sum(integrationTime)
    n = len(developmentTime)
    # sort development Time and integration Time descending 
    # based on developmenTime
    paired = list(zip(developmentTime, integrationTime))
    paired_sorted = sorted(paired, key=lambda x: x[0])
    developmentTime, integrationTime = zip(*paired_sorted)
    
    res = integration_sum
    development_sum = 0 
    for i in range(n):
        # this process is like trying to move some of integration choice
        # to development, you shouldn't consider a development time 
        # >= integration_sum, cuz your development sum is bound by 
        # the largest time. 
        if developmentTime[i] >= integration_sum:
            break
        integration_sum -= integrationTime[i]

        if max(developmentTime[i], integration_sum) < res:
            res = max(development_sum, integration_sum)
    
    return res


developmentTime = [3, 4, 5, 9]
integrationTime = [3, 2, 5, 5]
print(f"Brute force: {brute_force(developmentTime, integrationTime)}")
print(leastHours(developmentTime, integrationTime)) # 5

developmentTime = [8, 10, 6, 7]
integrationTime = [1, 2, 2, 1]
print(f"Brute force: {brute_force(developmentTime, integrationTime)}")
print(leastHours(developmentTime, integrationTime)) # 5

other_test_cases = test_cases = [
    # Example 1, 
    [[2, 3, 4], [3, 2, 1]],
    
    # Example 2
    [[1, 2, 3, 4], [4, 3, 2, 1]],
    
    # Example 3
    [[5, 7, 6], [8, 1, 3]],
    
    # Example 4
    [[9, 5, 6], [2, 1, 3]],
    
    # Example 5
    [[2, 10, 3], [5, 4, 8]]
]
for developmentTime, integrationTime in other_test_cases:
    print(f"Brute force: {brute_force(developmentTime, integrationTime)}")
    print(leastHours(developmentTime, integrationTime)) # 5